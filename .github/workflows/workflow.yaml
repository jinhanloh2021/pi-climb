name: Docker image build, publish, and deploy
on:
  push:
    branches:
      - "release"

env:
  AWS_ACCOUNT_ID: "842832773369"
  AWS_REGION: "ap-southeast-1"
  GITHUB_IAM_ROLE: "pi-climb_github-actions"
  IMAGE_TAG: ${{ github.sha }}
  NEXT_PUBLIC_SUPABASE_URL: "https://npsyopeyikopzzaqcqnr.supabase.co" # not secret
  NEXT_PUBLIC_SUPABASE_ANON_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5wc3lvcGV5aWtvcHp6YXFjcW5yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg2ODgwOTUsImV4cCI6MjA3NDI2NDA5NX0.9jKrwony-sdBp6t5KP2W1qF8RxdeEimWR24BXV46Ikw"
  NEXT_PUBLIC_API_URL: "https://www.dev.piclimb.com"

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    outputs:
      server_image: ${{ steps.build-server-image.outputs.image }}
      web_image: ${{ steps.build-web-image.outputs.image }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Configure AWS Credentials for ECR Access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.GITHUB_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push 'server' image to ECR
        id: build-server-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pi-climb-dev-server
        run: |
          FULL_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build ./server -f ./server/dockerfile -t "$FULL_IMAGE"
          docker push "$FULL_IMAGE"
          echo "image=$FULL_IMAGE" >> $GITHUB_OUTPUT

      - name: Build, Tag, and Push 'web' image to ECR
        id: build-web-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pi-climb-dev-web
        run: |
          FULL_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build ./web \
          -f ./web/dockerfile \
          --build-arg NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL \
          --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY=$NEXT_PUBLIC_SUPABASE_ANON_KEY \
          --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
          -t "$FULL_IMAGE"

          docker push "$FULL_IMAGE"
          echo "image=$FULL_IMAGE" >> $GITHUB_OUTPUT
      - name: Update SSM Parameter with new image URIs
        run: |
          aws ssm put-parameter --name "/pi-climb/dev/server-image-uri" --value "${{ steps.build-server-image.outputs.image }}" --type "String" --overwrite
          aws ssm put-parameter --name "/pi-climb/dev/web-image-uri" --value "${{ steps.build-web-image.outputs.image }}" --type "String" --overwrite

  terraform-apply:
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    environment:
      name: dev
      url: https://www.dev.piclimb.com

    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        working-directory: ./infra

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Configure AWS Credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.GITHUB_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve
